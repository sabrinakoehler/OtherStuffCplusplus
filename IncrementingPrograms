"More Complex Problems" in Zybooks

11.1 Developing programs incrementally

-Experienced programmers develop programs incrementally. Don'that
write the whole program and then run it!

Following program allows a user to enter a phone number
that includes letters. Such letters appear on phone keypads
along with numbers, enabling phone numbers like 1-55-HOLIDAY.
The program converts a phone number having numbers/letters into
one having numbers only. 
////
The first program version simply prints each string element, to ensure the loops interatres 
properly. 

#include <iostream>
#include <string>
using namespace std;

int main() {
   string phoneStr;    // User input: Phone number string
   unsigned int i = 0; // Current element in phone number string
   
   cout << "Enter phone number: ";
   cin >> phoneStr;
   
   for (i = 0; i < phoneStr.size(); ++i) { // For each element
      cout << "Element " << i << " is: " << phoneStr.at(i) << endl;
   }
   
   return 0;
}
////
The second program version outputs any number elements, outputing '?' for non-number elements.
a FIXME comment is commonly used to indicate program parts to be fixed or added, as above. Some
editor tools automaticaly highlight the FIXME comment to attract the programmer's attention.

#include <iostream>
#include <string>
using namespace std;

int main() {
   string phoneStr;         // User input: Phone number string
   unsigned int i = 0;      // Current element in phone number string
   char   currChar = '_';   // Current char in phone number string
   
   cout << "Enter phone number: ";
   cin >> phoneStr;
   
   cout << "Numbers only: ";
   for (i = 0; i < phoneStr.size(); ++i) { // For each element
      currChar = phoneStr.at(i);
      if ((currChar >= '0') && (currChar <= '9')) {
         cout << currChar; // Print element as is
      }
      // FIXME: Add else-if branches for letters and hyphen
      else {
         cout << '?';
      }
   }
   
   cout << endl;
   return 0;
}
////
The third version completes the else-if branch for the letters A-C (lowercase and uppercase),
per a standard phone keypad. The program also modifies
the if branch to echo a hyphen in addition to numbers. 

#include <iostream>
#include <string>
using namespace std;

int main() {
   string phoneStr;      // User input: Phone number string
   unsigned int i = 0;   // Current element in phone number string
   char currChar = '_';  // Current char in phone number string
   
   cout << "Enter phone number: ";
   cin >> phoneStr;
   
   cout << "Numbers only: ";
   for (i = 0; i < phoneStr.size(); ++i) { // For each element
      currChar = phoneStr.at(i);
      if (((currChar >= '0') && (currChar <= '9')) || (currChar == '-')) {
         cout << currChar; // Print element as is
      }
      else if ( ((currChar >= 'a') && (currChar <= 'c')) ||
               ((currChar >= 'A') && (currChar <= 'C')) ) {
         cout << "2";
      }
      // FIXME: Add remaining else-if branches
      else {
         cout << '?';
      }
   }
   
   cout << endl;
   
   return 0;
}
////
The fourth version can be created by filling in the if-else branches similarly 
for other letters. We added more instructions too. Code is not shown below, 
but sample input/output is provided.

Enter phone number (letters/- OK, no spaces): 1-555-HOLIDAY       
Numbers only: 1-555-4654329

...

Enter phone number (letters/- OK, no spaces): 1-555-holiday
Numbers only: 1-555-4654329

...

Enter phone number (letters/- OK, no spaces): 999-9999
Numbers only: 999-9999

...

Enter phone number (letters/- OK, no spaces): 9876zywx%$#@
Numbers only: 98769999????

////
11.1.1: Incremental programming 
Complete the program by providing the additional if-else branches
for decoding other letters in a phone number.
Try incrementally writing the program by adding
one "else-if" branch at a time, testing that each added
branch works as intended. 


#include <iostream>
#include <string>
using namespace std;

int main() {
   string phoneStr;       // User input: Phone number string
   unsigned int i = 0;   // Loop index, current element in phone number string
   char currChar = '_';  // Current char in phone number string
   
   cout << "Enter phone number: " << endl;
   cin >> phoneStr;
   
   cout << "Numbers only: ";
   for (i = 0; i < phoneStr.size(); ++i) { // For each element
      currChar = phoneStr.at(i);
      if (((currChar >= '0') && (currChar <= '9')) || (currChar == '-')) {
         cout << currChar; // Print element as is
      }
      else if ( ((currChar >= 'a') && (currChar <= 'c')) ||
                ((currChar >= 'A') && (currChar <= 'C')) ) {
         cout << "2";
      }
      else if ( ((currChar >= 'd') && (currChar <= 'f')) ||
                ((currChar >= 'D') && (currChar <= 'F')) ) {
         cout << "3";
      }
      else if ( ((currChar >= 'g') && (currChar <= 'i')) ||
                ((currChar >= 'G') && (currChar <= 'I')) ) {
         cout << "4";
      }
      else if ( ((currChar >= 'j') && (currChar <= 'l')) ||
                ((currChar >= 'J') && (currChar <= 'L')) ) {
         cout << "5";
      }
      else if ( ((currChar >= 'm') && (currChar <= 'o')) ||
                ((currChar >= 'M') && (currChar <= 'O')) ) {
         cout << "6";
      }
      else if ( ((currChar >= 'p') && (currChar <= 'r')) ||
                ((currChar >= 'P') && (currChar <= 'R')) ) {
         cout << "7";
      }
      else if ( ((currChar >= 's') && (currChar <= 'u')) ||
                ((currChar >= 'S') && (currChar <= 'U')) ) {
         cout << "8";
      }
      else if ( ((currChar >= 'v') && (currChar <= 'x')) ||
                ((currChar >= 'V') && (currChar <= 'X')) ) {
         cout << "9";
      }
      else if ( ((currChar >= 'y') && (currChar <= 'z')) ||
                ((currChar >= 'Y') && (currChar <= 'Z')) ) {
         cout << "0";
      }
      else {
         cout << '?';
      }
   }
   
   cout << endl;
   
   return 0;
}

INPUT:
1-800-555-HOLIDAY
OUTPUT:
Enter phone number: 1-800-555-HOLIDAY 
Numbers only: 1-800-555-4654320

//////////////////////////////////////////////////////
11.2 Break and Continue

-A break statement in a loop causes an immediate exit of the loop.
 A break statement can sometimes yield a loop that is easier to understand.

11.2.1: Break statement: Meal finder program.
#include <iostream>
using namespace std;

int main() {
   const int EMPANADA_COST = 3;
   const int TACO_COST     = 4;
   
   int userMoney    = 0;
   int numTacos     = 0;
   int numEmpanadas = 0;
   int mealCost     = 0;
   int maxEmpanadas = 0;
   int maxTacos     = 0;
   
   cout << "Enter money for meal: ";
   cin >> userMoney;
   
   maxEmpanadas = userMoney / EMPANADA_COST;
   maxTacos     = userMoney / TACO_COST;
   
   for (numTacos = 0; numTacos <= maxTacos; ++numTacos) {
      for (numEmpanadas = 0; numEmpanadas <= maxEmpanadas; ++numEmpanadas) {
         
         mealCost = (numEmpanadas * EMPANADA_COST) + (numTacos * TACO_COST);
         
         // Find first meal option that exactly matches user money
         if (mealCost == userMoney) {
            break;
         }
      }
      
      // Find first meal option that exactly matches user money
      if (mealCost == userMoney) {
         break;
      }
   }
   
   if (mealCost == userMoney) {
      cout << "$" << mealCost << " buys " << numEmpanadas
      << " empanadas and " << numTacos << " tacos without change." << endl;
   }
   else {
      cout << "You cannot buy a meal without having change left over." << endl;
   }
   
   return 0;
}

INPUT/OUTPUT:
Enter money for meal: 20
$20 buys 4 empanadas and 2 tacos without change.

...

Enter money for meal: 31
$31 buys 9 empanadas and 1 tacos without change.

//////////////////////////////////////////////////////

- A continue statement in a loop causes an immediate jump to the loop condition check.
A continue statement can sometimes improve the readability of a loop. The example
below extends the previous meal finder program to find meal options for which 
the total number of items purchased is evenly divisible by the number of diners.
The program also outputs all possible meal options, instead of just reporting
the first meal option found. 

11.2.2: Continue statement: Meal finder program that ensures items purchased is 
evenly divisible by the number of diners.

#include <iostream>
using namespace std;

#include <stdio.h>

int main() {
   const int EMPANADA_COST = 3;
   const int TACO_COST     = 4;
   
   int userMoney    = 0;
   int numTacos     = 0;
   int numEmpanadas = 0;
   int mealCost     = 0;
   int maxEmpanadas = 0;
   int maxTacos     = 0;
   int numOptions   = 0;
   int numDiners    = 0;
   
   cout << "Enter money for meal: ";
   cin >> userMoney;
   
   cout << "How many people are eating: ";
   cin >> numDiners;
   
   maxEmpanadas = userMoney / EMPANADA_COST;
   maxTacos     = userMoney / TACO_COST;
   
   numOptions = 0;
   for (numTacos = 0; numTacos <= maxTacos; ++numTacos) {
      for (numEmpanadas = 0; numEmpanadas <= maxEmpanadas; ++numEmpanadas) {
         
         // Total items purchased must be equally divisible by number of diners
         if ( ((numTacos + numEmpanadas) % numDiners) != 0) {
            continue;
         }
         
         mealCost = (numEmpanadas * EMPANADA_COST) + (numTacos * TACO_COST);
         
         if (mealCost == userMoney) {
            cout << "$" << mealCost << " buys " << numEmpanadas
            << " empanadas and " << numTacos << " tacos without change." << endl;
            numOptions += 1;
         }
      }
   }
   
   if (numOptions == 0) {
      cout << "You cannot buy a meal without having change left over." << endl;
   }
   
   return 0;
}

INPUT/OUTPUT:
Enter money for meal: 60
How many people are eating: 3
$60 buys 12 empanadas and 6 tacos without change.
$60 buys 0 empanadas and 15 tacos without change.

...

Enter money for meal: 54
How many people are eating: 2
$54 buys 18 empanadas and 0 tacos without change.
$54 buys 10 empanadas and 6 tacos without change.
$54 buys 2 empanadas and 12 tacos without change.

//////////////////////////////////////////////////////

11.2.1: Simon says. 
"Simon Says" is a memory game where "Simon" outputs a sequence of 10
characters (R, G, B, Y) and the user must repeat the sequence.
Create a for loop that compares the two strings starting from index 0.
For each match, add one point to userScore. Upon a mismatch, exit
the loop using a break statement. Ex: The following patterns yield a
userScore of 4:

simonPattern: RRGBRYYBGY
userPattern: RRGBBRYBGY

#include <iostream>
#include <string>
using namespace std;

int main() {
   string simonPattern;
   string userPattern;
   int userScore = 0;
   int i = 0;

   userScore = 0;
   simonPattern = "RRGBRYYBGY";
   userPattern  = "RRGBBRYBGY";

   for ( i = 0; simonPattern.at(i) == userPattern.at(i); i++) {
      ++userScore;
   }

   cout << "userScore: " << userScore << endl;

   return 0;
}
//////////////////////////////////////////////////////
11.3.2: Calculate adjusted salary and tax with deductions: Using loops (solution)

#include <iostream>
#include <string>
using namespace std;

int main() {
   const string PROMPT_SALARY = "\nEnter annual salary (0 to exit): ";
   const string PROMPT_DEDUCTION = "Enter a deduction (0 to end deductions): ";
   int    annualSalary    = 0;
   int    oneDeduction    = 0;
   int    totalDeductions = 0;
   int    adjustedSalary  = 0;
   double taxRate         = 0.0;
   int    taxToPay        = 0;

   cout << PROMPT_SALARY << endl;
   cin >> annualSalary;

   while (annualSalary > 0) {
      totalDeductions = 0;    // Start with 0 for each annual salary
      cout << PROMPT_DEDUCTION << endl;
      cin >> oneDeduction;

      while (oneDeduction > 0) {
         totalDeductions += oneDeduction;
         cout << PROMPT_DEDUCTION << endl;
         cin >> oneDeduction;
      }

      // Determine the tax rate from the adjusted salary
      adjustedSalary = annualSalary - totalDeductions;
      if (adjustedSalary <= 0) {
         adjustedSalary = 0;
         taxRate = 0.0;
      }
      else if (adjustedSalary <= 20000) {
         taxRate = 0.10;   // 0.10 is 10% written as a decimal
      }
      else if (adjustedSalary <= 50000) {
         taxRate = 0.20;
      }
      else if (adjustedSalary <= 100000) {
         taxRate = 0.30;
      }
      else {
         taxRate = 0.40;
      }

      taxToPay = static_cast<int>(adjustedSalary * taxRate);  // Truncate tax to an integer amount
      cout << "Annual salary: " << annualSalary << endl;
      cout << "\nDeductions: " << totalDeductions << endl;
      cout << "Adjusted salary after deductions: " << adjustedSalary << endl;
      cout << "Tax rate: " << taxRate << endl;
      cout << "Tax to pay: " << taxToPay << endl;

      // Get the next annual salary
      cout << PROMPT_SALARY << endl;
      cin >> annualSalary;
   }

   return 0;
}

//////////////////////////////////////////////////////

11.3.3: Create an annual income and tax table
A tax table shows three columns: an annual salary, the tax rate, and the tax amount to pay.
The program below shows most of the code needed to calculate a tax table.
1. Run the program below and note the results.
2. Alter the program to use a for loop to print a tax table of annual income, 
tax rate, and tax to pay.Use starting and ending annual salaries of 40000 and 60000, 
respectively, and a salary increment of 5000.
3. Run the program again and note the results. You should have 
five rows in the tax table.
4. Alter the program to add user prompts and read the starting and 
ending annual incomes from user input.
5. Run the program again using 40000 and 60000, respectively, and the same 
salary increment of 5000. You should have the same results as before.
6. Alter the program to ask the user for the increment to use in addition to 
the starting and ending annual salaries.
7. Run the program again using an increment of 2500. Are the entries for 40000, 45000,
 50000, 55000 and 60000 the same as before?

 #include <iostream>
using namespace std;

int main() {  
   int    annualSalary         = 0;
   double taxRate              = 0.0;
   int    taxToPay             = 0;
   int    startingAnnualSalary = 0;
   int    endingAnnualSalary   = 0;
   int    incomeIncrement      = 0;

   cout << "Enter first annual salary for the table: " << endl;
   cin >> startingAnnualSalary;
   cout << "Enter last annual salary for the table: " << endl;
   cin >> endingAnnualSalary;
   cout << "Enter the increment for the table: " << endl;
   cin >> incomeIncrement;

   for (annualSalary = startingAnnualSalary; annualSalary <= endingAnnualSalary;
        annualSalary += incomeIncrement) {

      // Determine the tax rate from the annual salary
      if (annualSalary <= 0) {
         taxRate = 0.0;
      }
      else if (annualSalary <= 20000) {
         taxRate = 0.10;   // 0.10 is 10% written as a decimal
      }
      else if (annualSalary <= 50000) {
         taxRate = 0.20;
      }
      else if (annualSalary <= 100000) {
         taxRate = 0.30;
      }
      else {
         taxRate = 0.40;
      }

      taxToPay = static_cast<int>(annualSalary * taxRate);   // Truncate tax to an integer amount
      cout << "Annual salary: " << annualSalary <<
              "\tTax rate: " << taxRate <<
              "\tTax to pay: " << taxToPay << endl;
   }
   
   return 0;
}

 //////////////////////////////////////////////////////

 A top-level domain (TLD) name is the last part of an Internet domain name like .com in example.com. 
 A core generic top-level domain (core gTLD) is a TLD that is either .com, 
 .net, .org, or .info. A second-level domain is a single name that precedes 
 a TLD as in apple in apple.com
 The following program uses a loop to repeatedly prompt for a domain name, and indicates whether that 
 domain name consists of a second-level domain followed by a core gTLD. An example of a valid domain
name for this program is apple.com. An invalid domain name for this program is support.apple.com because 
the name contains two periods. The program ends when the user presses just the
Enter key in response to a prompt.
1) Run the program and enter domain names to validate.
  Note that even valid input is flagged as invalid.
2) Change the program to validate a domain name. A valid domain name for this program has a second-level 
  domain followed by a core gTLD. Run the program again.

#include <iostream>
#include <string>
using namespace std;

int main() {
   string inputName  = "";
   string searchName = "";
   string coreGtld1  = ".com";
   string coreGtld2  = ".net";
   string coreGtld3  = ".org";
   string coreGtld4  = ".info";
   string theTld     = "";
   bool isCoreGtld   = false;
   int periodCounter = 0;
   int periodPosition = 0;

   int j = 0;
   int i = 0;

   cout << endl << "Enter the next domain name (<Enter> to exit): " << endl;
   cin >> inputName;

   while (inputName.length() > 0) {
      searchName = inputName;
      for (j = 0; j < inputName.length(); ++j) {
         searchName.at(j) = tolower(inputName.at(j));
      }
      isCoreGtld = false;

      periodCounter = 0;
      for (i = 0; i < searchName.length(); ++i) {
         if (searchName.at(i) == '.') {
            periodCounter++;
            periodPosition = i;
         }
      }

      if ((periodCounter == 1) && (searchName.at(0) != '.')) {
         // Extract the top-level domain name starting at the period's position.
         // Ex: If searchName = "example.com", the next statement extracts ".com"
         theTld = searchName.substr(periodPosition);

         if (theTld == coreGtld1) {
            isCoreGtld = true;
         }
         else if (theTld == coreGtld2) {
            isCoreGtld = true;
         }
         else if (theTld == coreGtld3) {
            isCoreGtld = true;
         }
         else if (theTld == coreGtld4) {
            isCoreGtld = true;
         }
         else {
            isCoreGtld = false;
         }
      }

      cout << "\"" << inputName << "\" ";
      if (isCoreGtld) {
         cout << "is a second-level domain followed by a core gTLD of \"" <<
                 theTld << "\"." << endl;
      }
      else {
         cout << "is not a second-level domain followed by a core gTLD." << endl;
      }

      cout << endl << "Enter the next domain name (or <Enter> to exit): " << endl;
      inputName = "";
      cin >> inputName;
   }

   return 0;
}
//////////////////////////////////////////////////////
11.5 Warm up: Drawing a right triangle (C++)
This program will output a right triangle based on user 
specified height triangleHeight and symbol triangleChar.

1) The given program outputs a fixed-height triangle using 
  a * character.Modify the given program to output a right 
  triangle that instead uses the user-specified triangleChar 
  character.
2) Modify the program to use a nested loop to output a 
  right triangle of height triangleHeight. The first line 
  will have one user-specified character, such as % or *.
  Each subsequent line will have one additional user-specified 
  character until the number in the triangle's base reaches 
  triangleHeight.Output a space after each user-specified character, 
  including a line's last user-specified character. 

 #include <iostream>
using namespace std;

int main() {
   char triangleChar = ' ';
   int triangleHeight = 0;
   int rows = 0;
   int cols = 0;

   cout << "Enter a character: ";
   cin >> triangleChar;
   cout<<endl;
   
   cout << "Enter triangle height: ";
   cin >> triangleHeight;
   cout<<endl;
   
   rows = 0;
   while (rows < triangleHeight) {
      cols = 0;
      while (cols <= rows) {
         cout << triangleChar << " ";
         cols++;
      }
      rows++;
      cout<<endl;
   }

   
   return 0;
} 

//////////////////////////////////////////////////////
11.6 Program: Drawing a half arrow (C++)

This program outputs a downwards facing arrow composed 
of a rectangle and a right triangle.he arrow dimensions 
are defined by user specified arrow base height, arrow 
base width, and arrow head width.

1) Modify the given program to use a loop to output an
 arrow base of height arrowBaseHeight.

2) Modify the given program to use a loop to output an 
arrow base of width arrowBaseWidth. Use a nested loop 
in which the inner loop draws the *’s, and the outer 
loop iterates a number of times equal to the height 
of the arrow base.

3) Modify the given program to use a loop to output 
an arrow head of width arrowHeadWidth.Use a nested 
loop in which the inner loop draws the *’s, and the 
outer loop iterates a number of times equal to the
 height of the arrow head.

 4) Modify the given program to only accept an arrow 
 head width that is larger than the arrow base width. 
 Use a loop to continue prompting the user for an arrow 
 head width until the value is larger than the arrow base width.

 "while (arrowHeadWidth <= arrowBaseWidth) {
   cout << "Enter arrow head width: " << endl;
   cin >> arrowHeadWidth;
}"

Example output for arrowBaseHeight = 5, arrowBaseWidth = 2,
 and arrowHeadWidth = 4:
 "Enter arrow base height: 5
Enter arrow base width: 2
Enter arrow head width: 4"

**
**
**
**
**
****
***
**
*

#include <iostream>
using namespace std;

int main() {
   int arrowBaseHeight = 0;
   int arrowBaseWidth  = 0;
   int arrowHeadWidth  = 0;
   int i = 0;
   int height = 0;
   int width = 0;
   int arrowBase = 0;
   
   cout << "Enter arrow base height: " << endl;
   cin >> arrowBaseHeight;
 
   
   cout << "Enter arrow base width: " << endl;
   cin >> arrowBaseWidth;
   
   cout << "Enter arrow head width: " << endl;
   cin >> arrowHeadWidth;

   while (arrowHeadWidth <= arrowBaseWidth) {
   cout << "Enter arrow head width: " << endl;
   cin >> arrowHeadWidth;
   }
   // Draw arrow base (height = 3, width = 2)
   for (height = 0; height < arrowBaseHeight; ++height) {
      for ( width = 0; width < arrowBaseWidth; width++) {
         cout << "*";
      }
      cout << endl;
   }
   for ( arrowBase = arrowHeadWidth; arrowBase > 0; --arrowBase) {
      for (i = 0; i < arrowBase; ++i) {
         cout << "*";
      }
      cout << endl;
   }

   
   return 0;
}




//////////////////////////////////////////////////////
11.9 Problem 11.1
Ask the user for a number between 3 and 10 (inclusive). 
Using a loop, calculate the product of the numbers between 2 and that number. 
For example, if the user chooses 5, the result would be 2 x 3 x 4 x 5 = 120.
Sample run: When input is:
5
The output exactly matches
Please enter a number from 3 to 10: 5
2 x 3 x 4 x 5  = 120


#include <iostream>
using namespace std;

int main() {
   int userInput = 0;
   int i = 0;
   int total = 1; //Need to set at 1 otherwise total = (i * 0) product won't increase 
   
   //Prompt user for a number between 3 and 10
   cout<<"Please enter a number from 3 to 10: ";
   cin>>userInput;
   cout<<userInput;
   cout<<endl;
   
   //Use a loop to calculate product of the numbers
   //between 2 and the user input number   
   if (userInput >= 3 && userInput <= 10 ) {
      for (i = 2; i <= userInput; ++i) {
         total = total * i; 
         cout << i << " "; 
         if (i != userInput) {
            cout << "x ";   
         } else {
            cout << "";
         }
      }
      cout<< " = " << total << endl;
   } else {
      cout<< "Please follow the directions!" << endl;
   }  
   
   return 0;
}

//////////////////////////////////////////////////////
11.10 Problem 11.2
Ask the user for a number between 3 and 100 (inclusive). 
Using a loop, determine if the number is prime; that is, 
check to see if it is evenly divisible by any number other than itself. 
For example:Please enter a number from 3 to 100: 67
Testing... 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 
19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 
36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 
53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66
67 is prime

#include <iostream>
 using namespace std;

int main() {
  int userInput = 0;
  int i = 0;

  //Prompt user for a number between 3 and 100
  cout << "Please enter a number from 3 to 100: ";
  cin >> userInput;
  cout << userInput;
  cout << endl;

  //If the number entered is between 3 and 100 
  if (userInput >= 3 && userInput <= 100) {
    cout << "Testing... ";

    //Use a loop to determine if userInput is a prime number
    //aka evenly divisible by any number other than itself
    for (i = 3; i < userInput; ++i) {
      if (userInput % i == 0) {
        cout << i << endl;
        cout << userInput << " is NOT prime" << endl;
        break;
      }
      if (i < userInput - 1) {
        cout << i << ", ";
      } else {
        cout << i;
        cout << endl;
        cout << userInput << " is prime" << endl;
      }
    }
  }

  return 0;
}

//////////////////////////////////////////////////////
11.11 Problem 11.3
Prompt the user for two integers. Using a loop, multiply the first
number by the second number using only addition. For example: 
Enter multiplicand: 5
Enter multiplier: 10
5 10 15 20 25 30 35 40 45 50 
Your total was 50

#include <iostream>
using namespace std;
int main() {
  int userPlicand = 0;
  int userPlier = 0;
  int product = 0; //proudct of two integers
  int i = 0;

  //Prompt user for two numbers
  //Number 1
  cout << "Enter multiplicand: ";
  cin >> userPlicand;
  cout << userPlicand;
  cout << endl;
  //Number 2
  cout << "Enter multiplier: ";
  cin >> userPlier;
  cout << userPlier;
  cout << endl;

  //set first iteration to userPlicand to start
  i = userPlicand;
  product = userPlier * userPlicand;
  while (i <= product) {
   cout << i << " ";
   //increment iterations by userPlicand until reaching product
   i = i + userPlicand;
  }
  cout << endl;
  cout << "Your total was " << product << endl;

  return 0;
}

//////////////////////////////////////////////////////
